AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Resources:
  CloudFrontSecurityFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-security-function
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            function addHeaderIfNotExists(headers, headerName, headerValue) {
                if (!(headerName in headers)) {
                    headers[headerName] = { value: headerValue };
                }
            }

            var response = event.response;
            var headers = response.headers;

            addHeaderIfNotExists(headers, 'strict-transport-security','max-age=63072000; includeSubDomains; preload');
            addHeaderIfNotExists(headers, 'x-xss-protection', '1; mode=block');
            addHeaderIfNotExists(headers, 'x-content-type-options', 'nosniff');
            addHeaderIfNotExists(headers, 'x-frame-options', 'DENY');
            addHeaderIfNotExists(headers, 'referrer-policy', 'no-referrer-when-downgrade');
            addHeaderIfNotExists(headers, 'feature-policy', 'accelerometer none; midi none; battery none; microphone none; magnetometer none; gyroscope none; usb none; fullscreen self; payment none;');
            addHeaderIfNotExists(headers, 'nel', '{"report_to":"default","max_age":31536000,"include_subdomains":true}');
            addHeaderIfNotExists(headers, 'permission-policy', 'accelerometer=(); midi=(); battery=(); microphone=(); magnetometer=(); gyroscope=(); usb=(); fullscreen=(self); payment=();clipboard-read=();');

            return response;
        }
      FunctionConfig:
        Comment: Add security headers
        Runtime: cloudfront-js-1.0

  CloudFrontSecurityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudfront/function/${AWS::StackName}-security-function
      RetentionInDays: 90

  CloudFrontRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-country-based-redirect-function
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var redirects = {
                'SE': '/kontakt/',
                'PL': '/o-nas/'
            };
            var headers = event.request.headers;
            var newPath = '/o-nas/';

            var country = headers['cloudfront-viewer-country'].value;
            if (country in redirects) {
                newPath = redirects[country];
            }

            console.log(`Sample log to show in Log Group. NewPath=${newPath}`);

            return {
                statusCode: 307,
                statusDescription: 'Temporary Redirect',
                headers: {"location": {"value": newPath}}
            };
        }
      FunctionConfig:
        Comment: Redirect base on country
        Runtime: cloudfront-js-1.0

  CloudFrontRedirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudfront/function/${AWS::StackName}-country-based-redirect-function
      RetentionInDays: 90

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies: false
          Prefix: CloudFront/
        HttpVersion: http2
        PriceClass: PriceClass_100
        CacheBehaviors:
          - TargetOriginId: Custom-website
            PathPattern: /
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 0
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            CachedMethods:
              - HEAD
              - GET
              - OPTIONS
            Compress: true
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontRedirectFunction.FunctionMetadata.FunctionARN
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
              Cookies:
                Forward: none
        DefaultCacheBehavior:
          TargetOriginId: Custom-website
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            - POST
            - PUT
            - PATCH
            - DELETE
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !GetAtt CloudFrontSecurityFunction.FunctionMetadata.FunctionARN
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Accept
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            Id: S3-website
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          - DomainName: rozchmurzeni.pl
            Id: Custom-website
            CustomOriginConfig:
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Identity to access ${WebsiteBucket}

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true