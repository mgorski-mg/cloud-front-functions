AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Resources:
  CloudFrontCountryBasedRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-country-based-redirect-function
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var redirects = {
                'SE': '/kontakt/',
                'PL': '/pl/index.html'
            };
            var headers = event.request.headers;
            var newPath = '/o-nas/';

            var country = headers['cloudfront-viewer-country'].value;
            if (country in redirects) {
                newPath = redirects[country];
            }

            console.log(`Sample log to show in Log Group. NewPath=${newPath}`);

            return {
                statusCode: 307,
                statusDescription: 'Temporary Redirect',
                headers: {"location": {"value": newPath}}
            };
        }
      FunctionConfig:
        Comment: Redirect base on country
        Runtime: cloudfront-js-1.0

  CloudFrontCountryBasedRedirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudfront/function/${AWS::StackName}-country-based-redirect-function
      RetentionInDays: 90

  CloudFrontNonWwwRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-non-www-redirect-function
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var request = event.request;
            var host = request.headers.host.value;

            var params = Object.keys(request.querystring)
                .map(key => key + '=' + request.querystring[key].value)
                .join('&');

            if (params.length > 0) {
                params = '?' + params;
            }

            // When the CloudFrontNonWww will be reached through domain, eg. sample-domain.com, the redirected address www.sample-domain.com will direct to MainCloudFront.
            var newPath = `https://www.${host}${request.uri}${params}`;

            console.log(`Sample log to show in Log Group. NewPath=${newPath}`);

            return {
                statusCode: 307,
                statusDescription: 'Temporary Redirect',
                headers: {"location": {"value": newPath}}
            };
        }
      FunctionConfig:
        Comment: Redirect non www
        Runtime: cloudfront-js-1.0

  CloudFrontNonWwwRedirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudfront/function/${AWS::StackName}-non-www-redirect-function
      RetentionInDays: 90

  MainCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - www.example-domain.com
        Enabled: true
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies: false
          Prefix: MainCloudFront/
        HttpVersion: http2
        PriceClass: PriceClass_100
        CacheBehaviors:
          - TargetOriginId: Custom-website
            PathPattern: /
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 0
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            CachedMethods:
              - HEAD
              - GET
              - OPTIONS
            Compress: true
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontCountryBasedRedirectFunction.FunctionMetadata.FunctionARN
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Viewer-Country
              Cookies:
                Forward: none
        DefaultCacheBehavior:
          TargetOriginId: Custom-website
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            - POST
            - PUT
            - PATCH
            - DELETE
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy
        Origins:
          - DomainName: rozchmurzeni.pl
            Id: Custom-website
            CustomOriginConfig:
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
          AcmCertificateArn: [arn]

  CloudFrontNonWww:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - example-domain.com
        Enabled: true
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies: false
          Prefix: CloudFrontNonWww/
        HttpVersion: http2
        PriceClass: PriceClass_100
        DefaultCacheBehavior:
          TargetOriginId: Custom-website
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            - POST
            - PUT
            - PATCH
            - DELETE
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontNonWwwRedirectFunction.FunctionMetadata.FunctionARN
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy
        Origins:
          - DomainName: rozchmurzeni.pl
            Id: Custom-website
            CustomOriginConfig:
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
          AcmCertificateArn: [arn]

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true