AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentType:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
      - mock
  EnvironmentName:
    Type: String
    AllowedPattern: '^((dev|stage|mock)(-[A-z0-9-]+)?)|(prod)$'
  ServiceName:
    Type: String

Conditions:
  IsNotProductionEnvironment: !Not [!Equals [!Ref EnvironmentType, prod]]

Resources:
  ########################################
  ################# KMS ##################
  ########################################

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Northmil Web KMS Key
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub ${AWS::StackName}-kms-key
        Statement:
          - Effect: Allow
            Action: kms:*
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'

  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${ServiceName}-${EnvironmentName}
      TargetKeyId: !GetAtt KmsKey.Arn

  ########################################
  ################# WAF ##################
  ########################################

  # LoggingConfigration is not allowed in CloudFormation
  # https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/349
  # Currently WAF and Kinesis needs to be connected in deploy-security.ps1 script using aws cli
  WebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${AWS::StackName}-WebAcl
      Description: !Sub WebACL for ${AWS::StackName} stack
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${AWS::StackName}-WebAcl-metric
      Rules:
        - !If
          - IsNotProductionEnvironment
          - Name: OfficesIpSetRule
            Priority: 7
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-OfficesIpSetRule-metric
            Statement:
              NotStatement:
                Statement:
                  IPSetReferenceStatement:
                    Arn: !GetAtt OfficesIpSet.Arn
          - !Ref AWS::NoValue
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesAmazonIpReputationList
            Priority: 0
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-AmazonIpReputationList-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAmazonIpReputationList
                ExcludedRules: []
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesAdminProtectionRuleSet
            Priority: 1
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-AdminProtectionRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAdminProtectionRuleSet
                ExcludedRules: []
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesBotControlRuleSet
            Priority: 2
            OverrideAction:
              Count: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-BotControlRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesBotControlRuleSet
                ScopeDownStatement:
                  NotStatement:
                    Statement:
                      OrStatement:
                        Statements:
                          - LabelMatchStatement:
                              Scope: LABEL
                              Key: awswaf:managed:aws:bot-control:bot:name:google_adsbot
                          - ByteMatchStatement:
                              SearchString: 358fb55d-d87b-4877-88df-34b3228ccce8
                              FieldToMatch:
                                SingleHeader:
                                  Name: x-waf-bypass
                              TextTransformations:
                                - Priority: 0
                                  Type: NONE
                              PositionalConstraint: EXACTLY
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesCommonRuleSet
            Priority: 3
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-CommonRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
                ExcludedRules: []
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesKnownBadInputsRuleSet
            Priority: 4
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-KnownBadInputsRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesKnownBadInputsRuleSet
                ExcludedRules: []
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesSQLiRuleSet
            Priority: 5
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-SQLiRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesSQLiRuleSet
                ExcludedRules: []
        - !If
          - IsNotProductionEnvironment
          - !Ref AWS::NoValue
          - Name: AWSManagedRulesWindowsRuleSet
            Priority: 6
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-WebAcl-WindowsRuleSet-metric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesWindowsRuleSet
                ExcludedRules: []

  OfficesIpSet:
    Type: AWS::WAFv2::IPSet
    Condition: IsNotProductionEnvironment
    Properties:
      Name: !Sub ${AWS::StackName}-OfficesIpSet
      Description: !Sub IPSet for ${AWS::StackName} stack
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses:
        - 37.128.126.34/32  # Polish Office
        - 31.208.40.194/32  # Swedish Office
        - 77.86.215.152/32  # Finnish Office
        - 52.214.118.168/32  # AWS prod VPC - TeamCity
        - 54.194.107.117/32  # AWS prod VPC - TeamCity
        - 52.31.41.236/32  # AWS prod VPC - TeamCity
        - 52.18.220.173/32  # AWS dev VPC
        - 52.213.106.168/32  # AWS stage VPC
        - 52.17.9.21/32  # Detectify
        - 52.17.98.131/32  # Detectify

  ########################################
  ############### Logging ################
  ########################################
  
  LoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt WebAcl.Arn
      LogDestinationConfigs:
        - !GetAtt S3DeliveryStream.Arn
      LoggingFilter:
        DefaultBehavior: KEEP
        Filters:
        - Behavior: DROP
          Requirement: MEETS_ALL
          Conditions:
          - ActionCondition:
              Action: ALLOW
  
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1095
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KmsKey.Arn
              SSEAlgorithm: aws:kms
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub aws-waf-logs-${AWS::StackName}
      DeliveryStreamEncryptionConfigurationInput:
        KeyARN: !GetAtt KmsKey.Arn
        KeyType: CUSTOMER_MANAGED_CMK
      S3DestinationConfiguration:
        BucketARN: !GetAtt LoggingBucket.Arn
        RoleARN: !GetAtt S3DeliveryStreamRole.Arn
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: UNCOMPRESSED
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref S3DeliveryLogGroup
          LogStreamName: !Ref S3DeliveryLogStream

  S3DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: firehose.amazonaws.com
      Policies:
        - PolicyName: allowToUseS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !GetAtt LoggingBucket.Arn
                  - !Sub ${LoggingBucket.Arn}/*
        - PolicyName: allowToUseKms
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: !GetAtt KmsKey.Arn
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub s3.${AWS::Region}.amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:s3:arn: !GetAtt LoggingBucket.Arn
        - PolicyName: allowToPutCloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: 
                  - !GetAtt S3DeliveryLogGroup.Arn

  S3DeliveryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  S3DeliveryLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref S3DeliveryLogGroup

  ########################################
  ################# ARM ##################
  ########################################

  ArmManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub ARM Security policy for ${ServiceName} stack
      Path: !Sub /arm/${ServiceName}/sec/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: wafv2:*
            Resource: !GetAtt WebAcl.Arn
          - Effect: Allow
            Action: kms:*
            Resource:
              - !GetAtt KmsKey.Arn
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/${KmsKeyAlias}
          - Effect: Allow
            Action: s3:*
            Resource:
              - !GetAtt LoggingBucket.Arn
              - !Sub ${LoggingBucket.Arn}/*
          - Effect: Allow
            Action: firehose:*
            Resource: !GetAtt S3DeliveryStream.Arn
          - Effect: Allow
            Action: iam:*
            Resource: !GetAtt S3DeliveryStreamRole.Arn

Outputs:
  WebAclArn:
    Description: Northmill WebAcl Arn
    Value: !GetAtt WebAcl.Arn
    Export:
      Name: !Sub ${AWS::StackName}-webacl-arn
